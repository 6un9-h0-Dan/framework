<?php
/**
 * Spiral Framework.
 *
 * @license   MIT
 * @author    Anton Titov (Wolfy-J)
 * @copyright Â©2009-2015
 */
namespace Spiral\Components\Session\Http;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Spiral\Components\Http\Cookies\CookieManager;
use Spiral\Components\Http\MiddlewareInterface;
use Spiral\Components\Session\SessionStore;
use Spiral\Core\Container;

class SessionStarter implements MiddlewareInterface
{
    /**
     * Cookie to store session ID in.
     */
    const COOKIE = 'session';

    /**
     * CookieManager
     *
     * @var CookieManager
     */
    protected $cookies = null;

    /**
     * Session store instance.
     *
     * @var SessionStore
     */
    protected $store = null;

    /**
     * Middleware constructing.
     *
     * @param CookieManager $cookies
     */
    public function __construct(CookieManager $cookies)
    {
        $this->cookies = $cookies;
    }

    /**
     * Manually set session store instance.
     *
     * @param SessionStore $store
     */
    public function setStore(SessionStore $store)
    {
        $this->store = $store;
    }

    /**
     * Get session store instance.
     *
     * @return SessionStore
     */
    public function getStore()
    {
        if (!empty($this->store))
        {
            return $this->store;
        }

        return $this->store = SessionStore::make();
    }

    /**
     * Handle request generate response. Middleware used to alter incoming Request and/or Response
     * generated by inner pipeline layers.
     *
     * @param ServerRequestInterface $request Server request instance.
     * @param \Closure               $next    Next middleware/target.
     * @param object|null            $context Pipeline context, can be HttpDispatcher, Route or module.
     * @return ResponseInterface
     */
    public function __invoke(ServerRequestInterface $request, \Closure $next = null, $context = null)
    {
        $cookies = $request->getCookieParams();
        if (isset($cookies[self::COOKIE]))
        {
            //Mounting ID retrieved from cookies
            $this->getStore()->setID($cookies[self::COOKIE]);
        }

        $response = $next();

        if (empty($this->store) && is_object(Container::getBinding('session')))
        {
            //Store were started by itself
            $this->setStore(Container::getInstance()->get('session'));
        }

        if (!empty($this->store) && ($this->store->isStarted() || $this->store->isDestroyed()))
        {
            return $this->commitSession($this->store, $response, $cookies);
        }

        return $response;
    }

    /**
     * Mount session id or remove session cookie.
     *
     * @param SessionStore      $store
     * @param ResponseInterface $response
     * @param array             $cookies
     * @return ResponseInterface
     */
    protected function commitSession(SessionStore $store, ResponseInterface $response, array $cookies)
    {
        $store->isStarted() && $store->commit();

        if (!isset($cookies[self::COOKIE]) || $cookies[self::COOKIE] != $store->getID())
        {
            if ($response instanceof ResponseInterface)
            {
                return $response->withAddedHeader(
                    'Set-Cookie',
                    $this->cookies->create(
                        self::COOKIE,
                        $store->getID(),
                        $store->getConfig()['lifetime']
                    )
                );
            }
        }

        return $response;
    }
}