<?php
/**
 * Spiral Framework.
 *
 * @license   MIT
 * @author    Anton Titov (Wolfy-J)
 * @copyright Â©2009-2015
 */
namespace Spiral\Components\Http\Router;

use Psr\Http\Message\ServerRequestInterface;
use Spiral\Components\Http\MiddlewareInterface;
use Spiral\Components\Http\Response;
use Spiral\Core\Component;
use Spiral\Core\Core;

class Router extends Component implements MiddlewareInterface
{
    /**
     * Internal name for default route.
     */
    const DEFAULT_ROUTE = 'default';

    /**
     * Core/Application instance is required to execute controllers (if route has controller as it's
     * target).
     *
     * @var Core
     */
    protected $core = null;

    /**
     * Registered routes.
     *
     * @var Route[]
     */
    protected $routes = array();

    /**
     * Router middleware used by HttpDispatcher and modules to perform URI based routing with defined
     * endpoint such as controller action, closure or middleware.
     *
     * @param Core        $core    Core instances required to call controller actions.
     * @param Route|array $routes  Pre-defined array of routes (if were collected externally).
     * @param array       $default Default route options, should include pattern and target, can not
     *                             have any middlewares attached.
     */
    public function __construct(Core $core, array $routes = array(), array $default = array())
    {
        $this->core = $core;

        foreach ($routes as $route)
        {
            if (!$route instanceof Route)
            {
                throw new \InvalidArgumentException("Routes should be array of Route instances.");
            }

            //Name aliasing is required to perform URL generation later
            $this->routes[$route->getName()] = $route;
        }

        //Registering default route
        if (!isset($this->routes[static::DEFAULT_ROUTE]) && $default)
        {
            $this->routes[static::DEFAULT_ROUTE] = new Route($default['pattern'], $default['target']);
        }
    }

    /**
     * Handle request generate response. Middleware used to alter incoming Request and/or Response
     * generated by inner pipeline layers.
     *
     * @param ServerRequestInterface $request Server request instance.
     * @param \Closure               $next    Next middleware/target.
     * @param object|null            $context Pipeline context, can be HttpDispatcher, Route or module.
     * @return Response
     */
    public function __invoke(ServerRequestInterface $request, \Closure $next = null, $context = null)
    {
        //Performing lookup

        return $this->core->callAction('Controllers\HomeController', 'index');
    }

    /**
     * Handle request generate response. Middleware used to alter incoming Request and/or Response
     * generated by inner pipeline layers. Alias for __invoke.
     *
     * @param ServerRequestInterface $request Server request instance.
     * @param \Closure               $next    Next middleware/target.
     * @param object|null            $context Pipeline context, can be HttpDispatcher, Route or module.
     * @return Response
     */
    public function handle(ServerRequestInterface $request, \Closure $next = null, $context = null)
    {
        return $this->__invoke($request, $next, $context);
    }
}