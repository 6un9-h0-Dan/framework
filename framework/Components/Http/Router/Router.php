<?php
/**
 * Spiral Framework.
 *
 * @license   MIT
 * @author    Anton Titov (Wolfy-J)
 * @copyright Â©2009-2015
 */
namespace Spiral\Components\Http\Router;

use Psr\Http\Message\ServerRequestInterface;
use Spiral\Components\Http\MiddlewareInterface;
use Spiral\Components\Http\Response;
use Spiral\Core\Core;

class Router implements MiddlewareInterface
{
    protected $core = null;

    protected $routes = array();

    public function __construct(Core $core, array $routes = array(), array $default = array())
    {
        $this->core = $core;
    }

    /**
     * Handle request generate response. Middleware used to alter incoming Request and/or Response
     * generated by inner pipeline layers.
     *
     * @param ServerRequestInterface $request Server request instance.
     * @param \Closure               $next    Next middleware/target.
     * @param object|null            $context Pipeline context, can be HttpDispatcher, Route or module.
     * @return Response
     */
    public function __invoke(ServerRequestInterface $request, \Closure $next = null, $context = null)
    {
        return $this->core->callAction('Controllers\HomeController', 'index');
    }
}