<?php
/**
 * Spiral Framework.
 *
 * @license   MIT
 * @author    Anton Titov (Wolfy-J)
 * @copyright Â©2009-2015
 */
namespace Spiral\Components\ORM\Exporters;

use Spiral\Components\Files\FileManager;
use Spiral\Components\ORM\SchemaBuilder;
use Spiral\Components\ORM\Schemas\ModelSchema;
use Spiral\Core\Component;
use Spiral\Support\Generators\Reactor\ClassElement;
use Spiral\Support\Generators\Reactor\FileElement;
use Spiral\Support\Generators\Reactor\NamespaceElement;

class DocumentationExporter extends Component
{
    /**
     * Namespace to use for virtual collections and compositors.
     */
    const VIRTUAL_NAMESPACE = '\\VirtualClasses\\';

    /**
     * ODM documents schema.
     *
     * @var SchemaBuilder
     */
    protected $builder = null;

    /**
     * Header DOC comment.
     *
     * @var string
     */
    protected $header = [
        'This file was generated by Spiral Framework. Script should never be included to application.',
        'Do not modify content of this file as it will be erased every schema update.'
    ];

    /**
     * New instance of documentation exporter. Reactor classes will be used to create such documentation.
     *
     * @param SchemaBuilder $builder
     */
    public function __construct(SchemaBuilder $builder)
    {
        $this->builder = $builder;
    }

    /**
     * Get virtual documentation for ActiveRecord model. Will render all model fields, methods,
     * relations and etc.
     *
     * @param ModelSchema $model
     * @return NamespaceElement
     */
    protected function renderRecord(ModelSchema $model)
    {
        $export = new ClassElement($name = $model->getShortName());

        //Accessors
        foreach ($model->getAccessors() as $name => $accessor)
        {
            if ($export->hasProperty($name))
            {
                continue;
            }

            if (is_array($accessor))
            {
                $accessor = $accessor[0];
            }

            $export->property($name, '@var \\' . $accessor);
        }

        foreach ($model->getFields() as $field => $type)
        {
            if ($export->hasProperty($field))
            {
                continue;
            }

            $export->property($field, '@var ' . $type);
        }

        return (new NamespaceElement($model->getNamespace()))->addClass($export);
    }

    /**
     * Render virtual documentation to file. Reactor RPHPFile will be used.
     *
     * @param string $filename
     * @return bool
     */
    public function render($filename)
    {
        $phpFile = FileElement::make()->setComment($this->header);

        foreach ($this->builder->getModelSchemas() as $record)
        {
            if ($record->isAbstract())
            {
                continue;
            }

            $phpFile->addElement($this->renderRecord($record));
        }

        return $phpFile->renderFile($filename, FileManager::RUNTIME, true);
    }
}