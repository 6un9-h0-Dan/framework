<?php
/**
 * Spiral Framework.
 *
 * @license   MIT
 * @author    Anton Titov (Wolfy-J)
 * @copyright Â©2009-2015
 */
namespace Spiral\Components\DBAL\Builders;

use Spiral\Components\Cache\StoreInterface;
use Spiral\Components\DBAL\Builders\Common\HavingTrait;
use Spiral\Components\DBAL\Builders\Common\JoinTrait;
use Spiral\Components\DBAL\Builders\Common\WhereTrait;
use Spiral\Components\DBAL\DBALException;
use Spiral\Components\DBAL\QueryBuilder;
use Spiral\Components\DBAL\QueryResult;
use Spiral\Components\DBAL\SqlExpression;
use Spiral\Support\Pagination\PaginatorTrait;

/**
 * AbstractSelectQuery provided basic functionality for any select query without query building,
 * unions and ability to specify source tables. This class used as parent for DBAL\SelectQuery and
 * for ORM\Selector.
 *
 * @method int avg($identifier) Perform aggregation based on column or expression value.
 * @method int min($identifier) Perform aggregation based on column or expression value.
 * @method int max($identifier) Perform aggregation based on column or expression value.
 * @method int sum($identifier) Perform aggregation based on column or expression value.
 */
abstract class AbstractSelectQuery extends QueryBuilder
{
    /**
     * Select builder uses where, join traits and can be paginated.
     */
    use WhereTrait, JoinTrait, HavingTrait, PaginatorTrait;

    /**
     * Flag to indicate that query is distinct.
     *
     * @var bool
     */
    protected $distinct = false;

    /**
     * Columns or expressions to be fetched from database, can include aliases (AS).
     *
     * @var array
     */
    protected $columns = ['*'];

    /**
     * Array of columns or/and expressions to be used to generate ORDER BY statement. Every orderBy
     * token should include correct identifier (or expression) and sorting direction (ASC, DESC).
     *
     * @var array
     */
    protected $orderBy = [];

    /**
     * Column names or expressions to group by.
     *
     * @var array
     */
    protected $groupBy = [];

    /**
     * Cache lifetime. Can be set at any moment and will change behaviour os run() method, if set -
     * query will be performed using Database->cached() function.
     *
     * @var int
     */
    protected $cacheLifetime = 0;

    /**
     * Cache key to be used. Empty if DBAL should generate key automatically.
     *
     * @var string
     */
    protected $cacheKey = '';

    /**
     * Cache store to be used for caching. Default cache store will be used if nothing was specified.
     *
     * @var StoreInterface
     */
    protected $cacheStore = null;

    /**
     * Specify that query result should be cached for specified amount of seconds. Attention, this
     * method will apply caching to every result generated by SelectBuilder including count() and
     * aggregation methods().
     *
     * @param int            $lifetime Cache lifetime in seconds.
     * @param string         $key      Cache key to be used, if none provided spiral will generate
     *                                 key based on generated SQL.
     * @param StoreInterface $store    Cache store to be used, default store will be used if nothing
     *                                 was specified.
     * @return static
     */
    public function cache($lifetime, $key = '', StoreInterface $store = null)
    {
        $this->cacheLifetime = $lifetime;
        $this->cacheKey = $key;
        $this->cacheStore = $store;

        return $this;
    }

    /**
     * Set distinct flag to true/false. Applying distinct to select query will return only unique
     * records from database.
     *
     * @param bool $distinct
     * @return static
     */
    public function distinct($distinct = true)
    {
        $this->distinct = $distinct;

        return $this;
    }

    /**
     * Set columns should be fetched as result of SELECT query. Columns can be provided with specified
     * alias (AS construction).
     *
     * @param array|string|mixed $columns Array of names, comma separated string or set of parameters.
     * @return static
     */
    public function columns($columns)
    {
        $this->columns = $this->fetchIdentifiers(func_get_args());

        return $this;
    }

    /**
     * Alias for columns() method. Set columns should be fetched as result of SELECT query. Columns
     * can be provided with specified alias (AS construction).
     *
     * @param array|string|mixed $columns Array of names, comma separated string or set of parameters.
     * @return static
     */
    public function select($columns)
    {
        $this->columns = $this->fetchIdentifiers(func_get_args());

        return $this;
    }

    /**
     * Specify grouping identifier or expression for select query.
     *
     * @param string $identifier
     * @return static
     */
    public function groupBy($identifier)
    {
        $this->groupBy[] = $identifier;

        return $this;
    }

    /**
     * Add results ordering. Order should be specified by identifier or expression and sorting direction.
     * Multiple orderBy() methods can be applied to one query. In case of unions order by will be
     * applied to united result.
     *
     * Method can accept array parameters:
     * $select->orderBy([
     *      'id'   => 'DESC',
     *      'name' => 'ASC'
     * ]);
     *
     * @param string|array $identifier Column or expression of SqlFragment.
     * @param string       $direction  Sorting direction, ASC|DESC.
     * @return static
     */
    public function orderBy($identifier, $direction = 'ASC')
    {
        if (is_array($identifier))
        {
            foreach ($identifier as $expression => $direction)
            {
                $this->orderBy[] = [$expression, $direction];
            }
        }
        else
        {
            $this->orderBy[] = [$identifier, $direction];
        }

        return $this;
    }

    /**
     * Get query binder parameters. Method can be overloaded to perform some parameters manipulations.
     * SelectBuilder will merge it's own parameters with parameters defined in UNION queries.
     *
     * @return array
     */
    public function getParameters()
    {
        //Join parameters always goes first
        return array_merge($this->getJoinParameters(), parent::getParameters());
    }

    /**
     * Counts the number of results for this query. Limit and offset values will be ignored. Attention,
     * method results will be cached (if requested), which means that attached paginator can work
     * incorrectly. Attention, you can't really use count() methods with united queries (at least
     * without tweaking every united query).
     *
     * @return int
     */
    public function count()
    {
        $backup = [$this->columns, $this->orderBy, $this->groupBy, $this->limit, $this->offset];
        $this->columns = ['COUNT(*)'];

        //Can not be used with COUNT()
        $this->orderBy = $this->groupBy = [];
        $this->limit = $this->offset = 0;

        $result = $this->run(false)->fetchColumn();
        list($this->columns, $this->orderBy, $this->groupBy, $this->limit, $this->offset) = $backup;

        return (int)$result;
    }

    /**
     * Perform one of SELECT aggregation methods. Supported methods: AVG, MIN, MAX, SUM. Attention,
     * you can't use aggregation methods with united queries without explicitly specifying aggregation
     * as column in every nested query.
     *
     * @param string $method
     * @param array  $arguments
     * @return int
     * @throws DBALException
     */
    public function __call($method, $arguments)
    {
        $columns = $this->columns;

        if (!in_array($method = strtoupper($method), ['AVG', 'MIN', 'MAX', 'SUM']))
        {
            throw new DBALException("Unknown aggregation method '{$method}'.");
        }

        if (!isset($arguments[0]) || count($arguments) > 1)
        {
            throw new DBALException("Aggregation methods can support exactly one column.");
        }

        $this->columns = ["{$method}({$arguments[0]})"];

        $result = $this->run(false)->fetchColumn();
        $this->columns = $columns;

        return (int)$result;
    }

    /**
     * Retrieve an external iterator, SelectBuilder will return QueryResult as iterator.
     *
     * @link http://php.net/manual/en/iteratoraggregate.getiterator.php
     * @return QueryResult
     */
    public function getIterator()
    {
        return $this->run();
    }

    /**
     * (PHP 5 > 5.4.0)
     * Specify data which should be serialized to JSON.
     *
     * @link http://php.net/manual/en/jsonserializable.jsonserialize.php
     * @return mixed
     */
    public function jsonSerialize()
    {
        return $this->getIterator()->jsonSerialize();
    }
}