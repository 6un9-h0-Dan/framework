
name: build

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

jobs:
  security:
    name: Security
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        php: [7.4] # Note: This workflow requires only the LATEST version of PHP
        os: [ubuntu-latest]

    steps:
      # General Steps
      - name: Set Git To Use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Checkout
        uses: actions/checkout@v2

      # Install PHP Dependencies
      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
      - name: Validate Composer
        run: composer validate
      - name: Get Composer Cache Directory
        # Docs: <https://github.com/actions/cache/blob/master/examples.md#php---composer>
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore Composer Cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install Dependencies
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 5
          max_attempts: 5
          command: composer update --${{ matrix.stability }} --prefer-dist --no-interaction --no-progress

      # Execution
      - name: Security Advisories
        run: composer require --dev roave/security-advisories:dev-latest

  coding-standards:
    name: Coding Standards
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        php: [7.4] # Note: This workflow requires only the LATEST version of PHP
        os: [ubuntu-latest]

    steps:
      # General Steps
      - name: Set Git To Use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Checkout
        uses: actions/checkout@v2

      # Install PHP Dependencies
      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
      - name: Validate Composer
        run: composer validate
      - name: Get Composer Cache Directory
        # Docs: <https://github.com/actions/cache/blob/master/examples.md#php---composer>
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore Composer Cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install Dependencies
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 5
          max_attempts: 5
          command: composer update --${{ matrix.stability }} --prefer-dist --no-interaction --no-progress

      # Execution
      - name: Check Coding Standards
        run: composer phpcs

  #
  # Execute unit tests on all valid PHP versions.
  #
  test:
    name: Build ${{matrix.php}} (${{ matrix.os }}) - ${{ matrix.stability }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        php: ['7.2', '7.3', '7.4', '8.0']
        os: [ubuntu-latest]
        stability: [prefer-lowest, prefer-stable]

    steps:
      # General Steps
      - name: Set Git To Use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Checkout
        uses: actions/checkout@v2

      # Install PHP Dependencies
      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          # PHP Extras
          extensions: pdo, pdo_mysql, pdo_sqlite
          coverage: pcov
          tools: pecl
          ini-values: "memory_limit=-1"
      - name: Validate Composer
        run: composer validate
      - name: Get Composer Cache Directory
        # Docs: <https://github.com/actions/cache/blob/master/examples.md#php---composer>
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore Composer Cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install Dependencies
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 5
          max_attempts: 5
          command: composer update --${{ matrix.stability }} --prefer-dist --no-interaction --no-progress

      # Install GO Dependencies
      - name: Setup Protobuf
        run: |
          PROTOC_VERSION=3.11.3
          PROTOC_FILENAME=protoc-${PROTOC_VERSION}-linux-x86_64.zip
          curl -sSL "https://github.com/google/protobuf/releases/download/v${PROTOC_VERSION}/${PROTOC_FILENAME}" -o ${PROTOC_FILENAME}
          unzip ${PROTOC_FILENAME}
          sudo mv bin/protoc /usr/bin
          protoc --version
      - name: Setup gRPC
        run: |
          GRPC_VERSION=1.2.0
          PHP_GRPC_DIR=protoc-gen-php-grpc-${GRPC_VERSION}-linux-amd64
          curl -sSL "https://github.com/spiral/php-grpc/releases/download/v${GRPC_VERSION}/${PHP_GRPC_DIR}.tar.gz" -o ${PHP_GRPC_DIR}.tar.gz
          tar -xf ${PHP_GRPC_DIR}.tar.gz ${PHP_GRPC_DIR}/protoc-gen-php-grpc
          sudo mv ${PHP_GRPC_DIR}/protoc-gen-php-grpc /usr/bin/protoc-gen-php-grpc

      # Execution
      - name: Execute Tests
        run: vendor/bin/phpunit --coverage-clover=coverage.xml
      - name: Upload Coverage To Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
