
name: build

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

jobs:
  security:
    name: Security
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        php: ['8.0'] # Note: This workflow requires only the LATEST version of PHP
        os: [ubuntu-latest]

    steps:
      # General Steps
      - name: Set Git To Use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Checkout
        uses: actions/checkout@v2

      # Install PHP Dependencies
      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
      - name: Validate Composer
        run: composer validate
      - name: Get Composer Cache Directory
        # Docs: <https://github.com/actions/cache/blob/master/examples.md#php---composer>
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore Composer Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-${{ matrix.php }}-composer-
      - name: Install Dependencies
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 5
          max_attempts: 5
          command: composer update --prefer-dist --no-interaction --no-progress

      # Execution
      - name: Security Advisories
        run: composer require --dev roave/security-advisories:dev-latest

  static-analysis:
    name: Psalm and Rector
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        php: ['8.1'] # Note: This workflow requires only the LATEST version of PHP
        os: [ubuntu-latest]

    steps:
      # General Steps
      - name: Set Git To Use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Checkout
        uses: actions/checkout@v2

      # Install PHP Dependencies
      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
      - name: Validate Composer
        run: composer validate
      - name: Get Composer Cache Directory
        # Docs: <https://github.com/actions/cache/blob/master/examples.md#php---composer>
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore Composer Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-${{ matrix.php }}-composer-
      - name: Install Dependencies
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 5
          max_attempts: 5
          command: composer update --prefer-dist --no-interaction --no-progress

      # Execution
      - name: Static Analysis
        run: |
          vendor/bin/psalm --no-cache
          vendor/bin/rector --dry-run


  coding-standards:
    name: Coding Standards
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        php: ['8.1'] # Note: This workflow requires only the LATEST version of PHP
        os: [ubuntu-latest]

    steps:
      # General Steps
      - name: Set Git To Use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Checkout
        uses: actions/checkout@v2

      # Install PHP Dependencies
      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
      - name: Validate Composer
        run: composer validate
      - name: Get Composer Cache Directory
        # Docs: <https://github.com/actions/cache/blob/master/examples.md#php---composer>
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore Composer Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-${{ matrix.php }}-composer-
      - name: Install Dependencies
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 5
          max_attempts: 5
          command: composer update --prefer-dist --no-interaction --no-progress

      # Execution
      - name: Check Coding Standards
        run: vendor/bin/phpcs --standard=phpcs.xml

  #
  # Execute unit tests on all valid PHP versions.
  #
  test:
    name: Build (${{matrix.php}}, ${{ matrix.os }}, ${{ matrix.stability }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        php: ['7.2', '7.3', '7.4', '8.0', '8.1']
        os: [ubuntu-latest]
        stability: [prefer-lowest, prefer-stable]

    steps:
      # General Steps
      - name: Set Git To Use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Checkout
        uses: actions/checkout@v2

      # Install PHP Dependencies
      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          # PHP Extras
          extensions: pdo, pdo_mysql, pdo_sqlite, sockets
          coverage: pcov
          tools: pecl
          ini-values: "memory_limit=-1"
      - name: Validate Composer
        run: composer validate
      - name: Get Composer Cache Directory
        # Docs: <https://github.com/actions/cache/blob/master/examples.md#php---composer>
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Restore Composer Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-${{ matrix.php }}-composer-
      - name: Install Dependencies
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 5
          max_attempts: 5
          command: composer update --${{ matrix.stability }} --prefer-dist --no-interaction --no-progress
      # Upgrade mockery on PHP 8
      - name: Install Dependencies
        if: ${{ matrix.php >= '8.0' }}
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 5
          max_attempts: 5
          command: composer update mockery/mockery --prefer-dist --no-interaction --no-progress

      # Execution
      - name: Execute Tests
        run: vendor/bin/phpunit --coverage-clover=coverage.xml
      - name: Upload Coverage To Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false

  split_monorepo:
    name: Split Monorepo
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        # define package to repository map
        package:
          # Bridge
          - local_path: 'Bridge/DataGrid'
            split_repository: 'data-grid-bridge'
          - local_path: 'Bridge/Stempler'
            split_repository: 'stempler-bridge'
          - local_path: 'Bridge/Monolog'
            split_repository: 'monolog-bridge'
          - local_path: 'Bridge/Dotenv'
            split_repository: 'dotenv-bridge'

          # Components
          - local_path: 'AnnotatedRoutes'
            split_repository: 'annotated-routes'
          - local_path: 'Annotations'
            split_repository: 'annotations'
          - local_path: 'Attributes'
            split_repository: 'attributes'
          - local_path: 'Auth'
            split_repository: 'auth'
          - local_path: 'AuthHttp'
            split_repository: 'auth-http'
          - local_path: 'Boot'
            split_repository: 'boot'
          - local_path: 'Cache'
            split_repository: 'cache'
          - local_path: 'Config'
            split_repository: 'config'
          - local_path: 'Console'
            split_repository: 'console'
          - local_path: 'Cookies'
            split_repository: 'cookies'
          - local_path: 'Core'
            split_repository: 'core'
          - local_path: 'Csrf'
            split_repository: 'csrf'
          - local_path: 'DataGrid'
            split_repository: 'data-grid'
          - local_path: 'Debug'
            split_repository: 'debug'
          - local_path: 'Distribution'
            split_repository: 'distribution'
          - local_path: 'Dumper'
            split_repository: 'dumper'
          - local_path: 'Encrypter'
            split_repository: 'encrypter'
          - local_path: 'Exceptions'
            split_repository: 'exceptions'
          - local_path: 'Files'
            split_repository: 'files'
          - local_path: 'Filters'
            split_repository: 'filters'
          - local_path: 'Hmvc'
            split_repository: 'hmvc'
          - local_path: 'Http'
            split_repository: 'http'
          - local_path: 'Logger'
            split_repository: 'logger'
          - local_path: 'Mailer'
            split_repository: 'mailer'
          - local_path: 'Models'
            split_repository: 'models'
          - local_path: 'Pagination'
            split_repository: 'pagination'
          - local_path: 'Prototype'
            split_repository: 'prototype'
          - local_path: 'Reactor'
            split_repository: 'reactor'
          - local_path: 'Router'
            split_repository: 'router'
          - local_path: 'Scaffolder'
            split_repository: 'scaffolder'
          - local_path: 'Security'
            split_repository: 'security'
          - local_path: 'SendIt'
            split_repository: 'sendit'
          - local_path: 'Session'
            split_repository: 'session'
          - local_path: 'Snapshots'
            split_repository: 'snapshots'
          - local_path: 'Stempler'
            split_repository: 'stempler'
          - local_path: 'Storage'
            split_repository: 'storage'
          - local_path: 'Streams'
            split_repository: 'streams'
          - local_path: 'Tokenizer'
            split_repository: 'tokenizer'
          - local_path: 'Translator'
            split_repository: 'translator'
          - local_path: 'Validation'
            split_repository: 'validation'
          - local_path: 'Queue'
            split_repository: 'queue'
          - local_path: 'Views'
            split_repository: 'views'

    steps:
      - uses: actions/checkout@v2

      # no tag
      - if: "!startsWith(github.ref, 'refs/tags/')"
        name: Monorepo Split of ${{ matrix.package }}
        uses: "symplify/monorepo-split-github-action@2.1"
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          package_directory: 'packages/${{ matrix.package.local_path }}'
          repository_organization: 'spiral'
          repository_name: '${{ matrix.package.split_repository }}'
          user-name: "GitHub Action"
          user-email: "action@github.com"

      # with tag
      - if: "startsWith(github.ref, 'refs/tags/')"
        name: Monorepo Tagged Split of ${{ matrix.package }}
        uses: "symplify/monorepo-split-github-action@2.1"
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          tag: ${GITHUB_REF#refs/tags/}

          package_directory: 'packages/${{ matrix.package.local_path }}'
          repository_organization: 'spiral'
          repository_name: '${{ matrix.package.split_repository }}'
          user-name: "GitHub Action"
          user-email: "action@github.com"
